version: "3.7"
services:
   zookeeper:
    image: 'bitnami/zookeeper:3.8.0'
    container_name: zookeeper
    pull_policy: if_not_present
    restart: unless-stopped
    ports:
      - '2181:2181'
    networks:
     - internal

    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - ./zookeeper:/var/lib/zookeeper

   kafka:
    image: 'bitnami/kafka:3.2.3'
    container_name: kafka
    pull_policy: if_not_present
    restart: unless-stopped
    #command:
    # - kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic main
    # - kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic chats
    # - kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic storage

    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_TOPIC_CREATE_ENABLE=true
    depends_on:
      - zookeeper  
    volumes:
      - ./kafka:/var/lib/kafka
    ports:
      - 9092:9092
    networks:
     - internal
   kafka-ui:
    image: provectuslabs/kafka-ui:master
    pull_policy: if_not_present
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: unless-stopped
    environment:
      - KAFKA_CLUSTERS_0_NAME=dev-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_1_NAME=prod-cluster
      - KAFKA_CLUSTERS_1_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_1_ZOOKEEPER=zookeeper:2181
      # If you prefer UI for Apache Kafka in read only mode
     # - KAFKA_CLUSTERS_0_READONLY=true
    networks:
     - internal  
   redis:
    image: redis:alpine
    container_name: redis
    pull_policy: if_not_present
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    volumes:
      - ./redis:/data
    ports:
     - 6379:6379
    networks:
       - internal
   mysql:
    image: mysql:5.7.39
    container_name: mysql
    pull_policy: if_not_present
    restart: unless-stopped
    volumes:
      - ./mysql:/var/lib/mysql
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
    ports:
      - 3306:3306  
    labels:
     - traefik.enable=false  
    networks:
      - internal
   phpmyadmin:
    image: phpmyadmin:5.2.0-apache
    pull_policy: if_not_present
    container_name: phpmyadmin
    depends_on:
       - mysql
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
    restart: unless-stopped
    ports:
      - 8082:80
    labels:
     - traefik.enable=false  
    networks:
      - internal
   postgres:
    image: postgres:14.5 
    container_name: postgres
    pull_policy: if_not_present
    restart: unless-stopped
    volumes:
      - ./postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
    ports:
      - 5432:5432 
    networks:
      - internal
   minio:
    image: 'bitnami/minio:2022.12.12'
    container_name:  minio
    restart: unless-stopped
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
    volumes:
      - ./minio:/data
    networks:
      - internal
networks:
  internal:
    external: false
    name: internal 
    
  